package com.fintech.erp.domain;

import static com.fintech.erp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class UgyfelElszamolasokAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUgyfelElszamolasokAllPropertiesEquals(UgyfelElszamolasok expected, UgyfelElszamolasok actual) {
        assertUgyfelElszamolasokAutoGeneratedPropertiesEquals(expected, actual);
        assertUgyfelElszamolasokAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUgyfelElszamolasokAllUpdatablePropertiesEquals(UgyfelElszamolasok expected, UgyfelElszamolasok actual) {
        assertUgyfelElszamolasokUpdatableFieldsEquals(expected, actual);
        assertUgyfelElszamolasokUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUgyfelElszamolasokAutoGeneratedPropertiesEquals(UgyfelElszamolasok expected, UgyfelElszamolasok actual) {
        assertThat(actual)
            .as("Verify UgyfelElszamolasok auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUgyfelElszamolasokUpdatableFieldsEquals(UgyfelElszamolasok expected, UgyfelElszamolasok actual) {
        assertThat(actual)
            .as("Verify UgyfelElszamolasok relevant properties")
            .satisfies(a ->
                assertThat(a.getTeljesitesiIdoszakKezdete())
                    .as("check teljesitesiIdoszakKezdete")
                    .isEqualTo(expected.getTeljesitesiIdoszakKezdete())
            )
            .satisfies(a ->
                assertThat(a.getTeljesitesiIdoszakVege()).as("check teljesitesiIdoszakVege").isEqualTo(expected.getTeljesitesiIdoszakVege())
            )
            .satisfies(a -> assertThat(a.getNapokSzama()).as("check napokSzama").isEqualTo(expected.getNapokSzama()))
            .satisfies(a ->
                assertThat(a.getTeljesitesIgazolasonSzereploOsszeg())
                    .as("check teljesitesIgazolasonSzereploOsszeg")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTeljesitesIgazolasonSzereploOsszeg())
            )
            .satisfies(a ->
                assertThat(a.getKapcsolodoSzamlaSorszamRogzitve())
                    .as("check kapcsolodoSzamlaSorszamRogzitve")
                    .isEqualTo(expected.getKapcsolodoSzamlaSorszamRogzitve())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUgyfelElszamolasokUpdatableRelationshipsEquals(UgyfelElszamolasok expected, UgyfelElszamolasok actual) {
        assertThat(actual)
            .as("Verify UgyfelElszamolasok relationships")
            .satisfies(a -> assertThat(a.getMegrendeles()).as("check megrendeles").isEqualTo(expected.getMegrendeles()));
    }
}
