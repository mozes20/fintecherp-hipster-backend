package com.fintech.erp.domain;

import static com.fintech.erp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BerekAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBerekAllPropertiesEquals(Berek expected, Berek actual) {
        assertBerekAutoGeneratedPropertiesEquals(expected, actual);
        assertBerekAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBerekAllUpdatablePropertiesEquals(Berek expected, Berek actual) {
        assertBerekUpdatableFieldsEquals(expected, actual);
        assertBerekUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBerekAutoGeneratedPropertiesEquals(Berek expected, Berek actual) {
        assertThat(actual)
            .as("Verify Berek auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBerekUpdatableFieldsEquals(Berek expected, Berek actual) {
        assertThat(actual)
            .as("Verify Berek relevant properties")
            .satisfies(a -> assertThat(a.getErvenyessegKezdete()).as("check ervenyessegKezdete").isEqualTo(expected.getErvenyessegKezdete())
            )
            .satisfies(a ->
                assertThat(a.getBruttoHaviMunkaberVagyNapdij())
                    .as("check bruttoHaviMunkaberVagyNapdij")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getBruttoHaviMunkaberVagyNapdij())
            )
            .satisfies(a -> assertThat(a.getMunkaszerzodes()).as("check munkaszerzodes").isEqualTo(expected.getMunkaszerzodes()))
            .satisfies(a ->
                assertThat(a.getTeljesKoltseg())
                    .as("check teljesKoltseg")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTeljesKoltseg())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBerekUpdatableRelationshipsEquals(Berek expected, Berek actual) {
        assertThat(actual)
            .as("Verify Berek relationships")
            .satisfies(a -> assertThat(a.getMunkavallalo()).as("check munkavallalo").isEqualTo(expected.getMunkavallalo()));
    }
}
